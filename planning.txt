4th of November, 2023

We were able to get some basic data transfer between a local server and a gamemaker client. I have a few thoughts about how to proceed with this project. Firstly I'm tempted to make some sort of very tiny MMO. Something where all you can do is wander around and... some sort of super simple game mechanic. Maybe pick up items? Talk to people? I think doing a whole battle system might be too much.

I want to finally deal with the concept of accounts, and secure password storage. It looks like gamemaker is capable of doing http requests. 

Used this guide to setup typescript for node.js
https://khalilstemmler.com/blogs/typescript/node-starter-project/


5th of November, 2023

We've got the client and the server talking to eachother. I'm still stuck on what sort of game to make. I like the idea of something that doesn't require a ton of state synching since that's a lot to accomplish before Thursday. Oh I should've mentioned I have this goal of something playable to present by Thursday.

Fixed some bugs where browser based exports weren't using a web socket connection. That involved adding a web socket server but I don't think it's a big deal. This was important because now we should be able to export as a web browser game, and anyone can play easily.

I'm still thinking about my mini MMO idea, and I have one idea for how to handle state. What if the game was actually defined and run in the server, and the client is simply a remote controller and renderer. The game could state coule be something totally serializable. Something that could be stored in JSON. The server could send updates to the player whenever the game world state changed, such as an enemy or player moving, or whatever. And the client sends controller input to the server. This will probably end up feeling really laggy, but at the very least it would be consistent. And might be a good way to do a "first go" at this.

We'd have to figure out a way to render the game world from json data. No more creating rooms right in game maker. Maybe that could be tomorrow's project. Create a json level that can be sent from the server to the client, and a way for the client to render it. And if we're feeling really ambitious, add some form of controllable player.

I've got a node server running, and I'm trying to send data to it through `http_request`. I've tested it with Postman and the server correctly receives requests and prints whatever's in the body of the request. It also receives requests from my GameMaker client, but it doesn't print the body correctly. 

I was able to almost completely fix the http_request invisible body bug. Firstly, the server didn't have CORS configured, so the browser didn't trust anything it was getting back from the server. And since it sends a preflight request before sending the "real" request, the preflight would fail and the real request never made it to the server. Also the mothod for my request was GET. The method POST is what's designed to have a body, and changing the gamemaker method to POST seems to have fixed it in almost all cases. 

For some reason it's still not working on GX Games export in chrome? Very annoying, but since it works fine on every other export I'm tempted to not worry about this yet. We'll come back to this. For now let's think about how we want state to work in game.

I have an idea to get multiple boxes moving around. First, let's imagine the entire state of the game is serializeable so that it can be easily shipped over the web. And for now our only game entities are players, and their entire state will be this:

{
	player_id: string,
	position_x: real,
	position_y: real,
	player_color: color.
}

We could store these player objects in a struct, where the key for each player is their id. If there were 3 players in the game, the entire game state could look like this:

{
	40ed49ac-2181-4bf9-982b-032e7508fd86: {
		player_id: 40ed49ac-2181-4bf9-982b-032e7508fd86,
		position_x: 87,
		position_y: 12,
		player_color: blue,
	},
	9f9132af-26b5-4c3a-bca4-632e010c9595: {
		player_id: 9f9132af-26b5-4c3a-bca4-632e010c9595,
		position_x: 99,
		position_y: 4,
		player_color: blue,
	},
	a1ed9157-9c15-49a0-a08d-43bec6eafff7: {
		player_id: a1ed9157-9c15-49a0-a08d-43bec6eafff7,
		position_x: 32,
		position_y: 9,
		player_color: blue,
	},
}

Whenever the game state on the server updates, we could ship it to all players (probably using our TCP socket network?). When the clients receive this information they'll simply overwrite whatever internal gamestate they have, and replace it with this one. And so on the draw cycle each client will see an updated game state.

But the players need to be able to move themselves around. So when a player changes their position, we'll send a message to the server to update their gamestate by the correct values. I think there are issues with lage, and relying on the server to tak input and update positions, but let's start with this. Once that's working we can try doing fancy stuff where we don't overwrite the players own state when pulling from the server.

Right now I have it rigged up so hitting an http endpoint will create the player. I want the player to exist in the world for as long as the client is running. So as soon as they quit the player should be removed. The only way I have to check that is on error or connection end for the socket connections. But since the http request and the socket connections don't know about eachother, how will the socket connection know which player id to remove and update? I almost wonder if we shouldn't even use the http request yet.

I want to keep the http request around because I know we'll want to use that in the future. Actually how about this, we'll leave it so that only tcp/web socket connection error or end can remove players. And we'll simply not start the tcp/websocket connection until the client has gotten their player id. And once the socket connection is established, we'll have the client send the server the player id it got earlier, and from there we'll be able to connect the socket connection with a player id.

Is there no way to gracefully close a socket connection in gamemaker??


